{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { PLAYER_SPEED, EATING_TIME_SECONDS } from '../constants';\nimport { getNewPosition, getChangedVector, orderPolarity } from './movement';\nfunction getEatenFood(food, player, newPosition) {\n  var _orderPolarity = orderPolarity(player.direction),\n    plane = _orderPolarity.plane,\n    polarity = _orderPolarity.polarity;\n  return food.findIndex(function (_ref) {\n    var position = _ref.position,\n      eaten = _ref.eaten;\n    return !eaten && position[1 - plane] === player.position[1 - plane] && polarity * position[plane] >= polarity * player.position[plane] && polarity * position[plane] <= polarity * newPosition[plane];\n  });\n}\nfunction getNewPlayerVector(player, time) {\n  try {\n    var _getNewPosition = getNewPosition(player.position, player.direction, PLAYER_SPEED, time),\n      newPosition = _getNewPosition.newPosition,\n      movedDistance = _getNewPosition.movedDistance;\n    if (player.nextDirection !== player.direction) {\n      var changedVector = getChangedVector(player.position, newPosition, player.direction, player.nextDirection, movedDistance);\n      if (changedVector) {\n        return {\n          position: changedVector,\n          direction: player.nextDirection\n        };\n      }\n    }\n    return {\n      position: newPosition\n    };\n  } catch (err) {\n    // wrapped\n    return {};\n  }\n}\nfunction eatMonsters(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    monsters: state.monsters.map(function (monster) {\n      return _objectSpread(_objectSpread({}, monster), {}, {\n        eatingTime: EATING_TIME_SECONDS\n      });\n    })\n  });\n}\nexport function animatePlayer(state, time) {\n  var newVector = getNewPlayerVector(state.player, time);\n  var eatenFoodIndex = getEatenFood(state.food, state.player, newVector.position);\n  var food = state.food.slice();\n  var scoreDelta = 0;\n  if (eatenFoodIndex > -1) {\n    food[eatenFoodIndex].eaten = true;\n    scoreDelta = 1 + (food[eatenFoodIndex].big >> 0);\n  }\n  var eating = eatenFoodIndex > -1 && food[eatenFoodIndex].big;\n  var nextState = _objectSpread(_objectSpread({}, state), {}, {\n    score: state.score + scoreDelta,\n    player: _objectSpread(_objectSpread({}, state.player), newVector),\n    food: food\n  });\n  if (eating) {\n    return eatMonsters(nextState);\n  }\n  return nextState;\n}","map":{"version":3,"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","PLAYER_SPEED","EATING_TIME_SECONDS","getNewPosition","getChangedVector","orderPolarity","getEatenFood","food","player","newPosition","_orderPolarity","direction","plane","polarity","findIndex","_ref","position","eaten","getNewPlayerVector","time","_getNewPosition","movedDistance","nextDirection","changedVector","err","eatMonsters","state","monsters","map","monster","eatingTime","animatePlayer","newVector","eatenFoodIndex","slice","scoreDelta","big","eating","nextState","score"],"sources":["/Users/lordsmac/Documents/Dev/React_Play_Ground/Dashboard/Portfolio/portfolio/node_modules/react-pacman/dist/game/player.js"],"sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PLAYER_SPEED, EATING_TIME_SECONDS } from '../constants';\nimport { getNewPosition, getChangedVector, orderPolarity } from './movement';\n\nfunction getEatenFood(food, player, newPosition) {\n  var _orderPolarity = orderPolarity(player.direction),\n      plane = _orderPolarity.plane,\n      polarity = _orderPolarity.polarity;\n\n  return food.findIndex(function (_ref) {\n    var position = _ref.position,\n        eaten = _ref.eaten;\n    return !eaten && position[1 - plane] === player.position[1 - plane] && polarity * position[plane] >= polarity * player.position[plane] && polarity * position[plane] <= polarity * newPosition[plane];\n  });\n}\n\nfunction getNewPlayerVector(player, time) {\n  try {\n    var _getNewPosition = getNewPosition(player.position, player.direction, PLAYER_SPEED, time),\n        newPosition = _getNewPosition.newPosition,\n        movedDistance = _getNewPosition.movedDistance;\n\n    if (player.nextDirection !== player.direction) {\n      var changedVector = getChangedVector(player.position, newPosition, player.direction, player.nextDirection, movedDistance);\n\n      if (changedVector) {\n        return {\n          position: changedVector,\n          direction: player.nextDirection\n        };\n      }\n    }\n\n    return {\n      position: newPosition\n    };\n  } catch (err) {\n    // wrapped\n    return {};\n  }\n}\n\nfunction eatMonsters(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    monsters: state.monsters.map(function (monster) {\n      return _objectSpread(_objectSpread({}, monster), {}, {\n        eatingTime: EATING_TIME_SECONDS\n      });\n    })\n  });\n}\n\nexport function animatePlayer(state, time) {\n  var newVector = getNewPlayerVector(state.player, time);\n  var eatenFoodIndex = getEatenFood(state.food, state.player, newVector.position);\n  var food = state.food.slice();\n  var scoreDelta = 0;\n\n  if (eatenFoodIndex > -1) {\n    food[eatenFoodIndex].eaten = true;\n    scoreDelta = 1 + (food[eatenFoodIndex].big >> 0);\n  }\n\n  var eating = eatenFoodIndex > -1 && food[eatenFoodIndex].big;\n\n  var nextState = _objectSpread(_objectSpread({}, state), {}, {\n    score: state.score + scoreDelta,\n    player: _objectSpread(_objectSpread({}, state.player), newVector),\n    food: food\n  });\n\n  if (eating) {\n    return eatMonsters(nextState);\n  }\n\n  return nextState;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}